(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{417:function(t,s,a){"use strict";a.r(s);var e=a(20),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"短链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#短链接"}},[t._v("#")]),t._v(" 短链接")]),t._v(" "),a("h2",{attrs:{id:"优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[t._v("#")]),t._v(" 优势")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("链接屏蔽。区别于链接伪装：链接伪装是一种黑帽SEO手段，它通过欺骗搜索引擎将用户跳转到与原页面不相关的页面，这样会导致网站被搜索引擎惩罚。")])]),t._v(" "),a("li",[a("p",[t._v("链接缩短。微博推特等社交媒体发布内容长度限制（最初目的），另外包括短信推广等。")])]),t._v(" "),a("li",[a("p",[t._v("数据统计。短链接服务器可以收集请求信息，做到数据统计（需要使用302重定向才可以）。")])]),t._v(" "),a("li",[a("p",[t._v("A/B测试。"),a("a",{attrs:{href:"https://www.zhihu.com/question/20045543",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是 A/B 测试？"),a("OutboundLink")],1),t._v(" 简单来说就是让一部分用户使用 A 方案，同时另一部分用户使用 B 方案，统计并对比不同方案的转化率、点击量、留存率等指标，以判断不同方案的优劣并进行决策，从而提升转化率。")])])]),t._v(" "),a("h2",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),a("p",[t._v("当我们在浏览器里输入 http://t.cn/RlB2PdD 时")]),t._v(" "),a("ol",[a("li",[t._v("DNS首先解析获得 "),a("a",{attrs:{href:"http://t.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://t.cn"),a("OutboundLink")],1),t._v(" 的 "),a("code",[t._v("IP")]),t._v(" 地址")]),t._v(" "),a("li",[t._v("当 "),a("code",[t._v("DNS")]),t._v(" 获得 "),a("code",[t._v("IP")]),t._v(" 地址以后（比如：74.125.225.72），会向这个地址发送 "),a("code",[t._v("HTTP")]),t._v(" "),a("code",[t._v("GET")]),t._v(" 请求，查询短码 "),a("code",[t._v("RlB2PdD")])]),t._v(" "),a("li",[a("a",{attrs:{href:"http://t.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://t.cn"),a("OutboundLink")],1),t._v(" 服务器会通过短码 "),a("code",[t._v("RlB2PdD")]),t._v(" 获取对应的长 URL")]),t._v(" "),a("li",[t._v("请求通过 "),a("code",[t._v("HTTP")]),t._v(" "),a("code",[t._v("301")]),t._v(" 转到对应的长 URL "),a("a",{attrs:{href:"https://m.helijia.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://m.helijia.com"),a("OutboundLink")],1),t._v(" 。")])]),t._v(" "),a("h3",{attrs:{id:"ps-301和302的选择问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ps-301和302的选择问题"}},[t._v("#")]),t._v(" PS：301和302的选择问题")]),t._v(" "),a("p",[a("code",[t._v("301")]),t._v("是永久重定向，"),a("code",[t._v("302")]),t._v(" 是临时重定向。"),a("code",[t._v("301")]),t._v("会被浏览器硬缓存，"),a("code",[t._v("302")]),t._v("则不会。")]),t._v(" "),a("p",[t._v("短地址一经生成就不会变化，所以用"),a("code",[t._v("301")]),t._v("是符合 "),a("code",[t._v("http")]),t._v(" 语义的。同时对服务器压力也会有一定减少。")]),t._v(" "),a("p",[t._v("但是如果使用了 "),a("code",[t._v("301")]),t._v("，就无法统计到短地址被点击的次数了。（因为一旦访问过"),a("code",[t._v("301")]),t._v("的重定向地址，拿到长链接之后，浏览器后续再请求短链接时会从浏览器缓存中得到长链接信息，而跳过向短链接服务器请求的步骤。在短链接服务层是获取不到请求信息的）而这个点击次数是一个非常有意思的大数据分析数据源。能够分析出的东西非常非常多。所以选择302虽然会增加服务器压力，但是我想是一个更好的选择。"),a("a",{attrs:{href:"https://www.zhihu.com/question/29270034/answer/46446911",target:"_blank",rel:"noopener noreferrer"}},[t._v("短 URL 系统是怎么设计的？"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"pps-如何清除301缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pps-如何清除301缓存"}},[t._v("#")]),t._v(" PPS："),a("a",{attrs:{href:"https://blog.csdn.net/dfsgwe1231/article/details/105993152",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何清除301缓存？"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("因为必须清掉重定向前的短链接缓存，所以直接清除当前页面缓存是不行的。两个方案：")]),t._v(" "),a("ol",[a("li",[t._v("直接清除浏览器全部缓存（甚至cookie）。")]),t._v(" "),a("li",[t._v("F12 => newtwork => 勾上Preverse log => 清除日志 => 访问短链接 => 选中短链接地址（此时应该是第一个） => 右键 「clear browser cache」 清除域缓存。")])]),t._v(" "),a("h2",{attrs:{id:"实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现方式"}},[t._v("#")]),t._v(" 实现方式")]),t._v(" "),a("p",[t._v("知乎："),a("a",{attrs:{href:"https://www.zhihu.com/question/29270034/answer/46446911",target:"_blank",rel:"noopener noreferrer"}},[t._v("短 URL 系统是怎么设计的？"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.oecom.cn/shorturltouse/",target:"_blank",rel:"noopener noreferrer"}},[t._v("短链接原理及其算法实现"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"t-cn跳转时页面展示案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#t-cn跳转时页面展示案例"}},[t._v("#")]),t._v(" t.cn跳转时页面展示案例")]),t._v(" "),a("ol",[a("li",[t._v("知乎：https://link.zhihu.com/?target=http://c1.tingmin.com.cn")]),t._v(" "),a("li",[t._v("微博：http://t.cn/A6w7JiKs")]),t._v(" "),a("li",[t._v("CSDN：https://link.csdn.net/?target=https%3A%2F%2Fhackernoon.com%2Fhow-to-clear-the-301302-redirection-cache-oze33y9v")])]),t._v(" "),a("h2",{attrs:{id:"【摘录】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【摘录】"}},[t._v("#")]),t._v(" 【摘录】")]),t._v(" "),a("p",[t._v("作者：码海\n链接：https://www.zhihu.com/question/29270034/answer/1679116463\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("今天，我们来谈谈如何设计一个高性能短链系统，短链系统设计看起来很简单，但每个点都能展开很多知识点，也是在面试中非常适合考察侯选人的一道设计题，本文将会结合我们生产上稳定运行两年之久的高性能短链系统给大家简单做下设计这套系统所涉及的一些思路，希望对大家能有一些帮助。")]),t._v(" "),a("p",[t._v("本文将会从以下几个方面来讲解，每个点包含的信息量都不少，相信大家看完肯定有收获")]),t._v(" "),a("ul",[a("li",[t._v("短链有啥好处，为啥要设计它，用长链不香吗")]),t._v(" "),a("li",[t._v("短链跳转的基本原理")]),t._v(" "),a("li",[t._v("短链生成的几种方法")]),t._v(" "),a("li",[t._v("短链的架构支撑")])]),t._v(" "),a("p",[a("strong",[t._v("注：里面涉及到不少布隆过滤器，snowflake 等技术，由于不是本文重点，所以建议大家看完后再自己去深入了解，不然展开讲篇幅会很长")])]),t._v(" "),a("h2",{attrs:{id:"短链有啥好处-用长链不香吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#短链有啥好处-用长链不香吗"}},[t._v("#")]),t._v(" 短链有啥好处，用长链不香吗")]),t._v(" "),a("p",[t._v("来看下以下极客时间发我的营销短信，点击下方蓝色的链接（短链）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic1.zhimg.com/50/v2-2dd3df10ccf7a036656602714c99a181_hd.jpg?source=1940ef5c",alt:"img"}}),a("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-2dd3df10ccf7a036656602714c99a181_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("p",[t._v("浏览器的地址栏上最终会显示一条如下的长链。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic1.zhimg.com/50/v2-e991d8f91a328b6e6a0adea325bfd9a1_hd.jpg?source=1940ef5c",alt:"img"}}),a("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-e991d8f91a328b6e6a0adea325bfd9a1_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("p",[t._v("那么为啥要用短链表示，直接用长链不行吗，用短链的话有如下好外")]),t._v(" "),a("p",[t._v("1、链接变短，在对内容长度有限制的平台发文，可编辑的文字就变多了")]),t._v(" "),a("p",[t._v("最典型的就是微博，限定了只能发 140 个字，如果一串长链直接怼上去，其他可编辑的内容就所剩无几了，用短链的话，链接长度大大减少，自然可编辑的文字多了不少。")]),t._v(" "),a("p",[t._v("再比如一般短信发文有长度限度，如果用长链，一条短信很可能要拆分成两三条发，本来一条一毛的短信费变成了两三毛，何苦呢。另外用短链在内容排版上也更美观。")]),t._v(" "),a("p",[t._v("2、我们经常需要将链接转成二维码的形式分享给他人，如果是长链的话二维码密集难识别，短链就不存在这个问题了,如图示")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/50/v2-688713345f733ad7b9c9a08631ba59f7_hd.jpg?source=1940ef5c",alt:"img"}}),a("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-688713345f733ad7b9c9a08631ba59f7_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("p",[t._v("3、链接太长在有些平台上无法自动识别为超链接")]),t._v(" "),a("p",[t._v("如图示，在钉钉上，就无法识别如下长链接，只能识别部分，用短地址无此问题")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/50/v2-d135221a590cd5aecf0d08062df06f91_hd.jpg?source=1940ef5c",alt:"img"}}),a("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-d135221a590cd5aecf0d08062df06f91_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"短链跳转的基本原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#短链跳转的基本原理"}},[t._v("#")]),t._v(" 短链跳转的基本原理")]),t._v(" "),a("p",[t._v("从上文可知，短链好处多多，那么它是如何工作的呢。我们在浏览器抓下包看看")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic3.zhimg.com/50/v2-ec09de48dd776c63dfa2aa1241c2bc7d_hd.jpg?source=1940ef5c",alt:"img"}}),a("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-ec09de48dd776c63dfa2aa1241c2bc7d_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("p",[t._v("可以看到请求后，返回了状态码 302（重定向）与 location 值为长链的响应，然后浏览器会再请求这个长链以得到最终的响应,整个交互流程图如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/50/v2-f8a018119fa259e045d91288c426f1dc_hd.jpg?source=1940ef5c",alt:"img"}}),a("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-f8a018119fa259e045d91288c426f1dc_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("p",[t._v("主要步骤就是访问短网址后重定向访问 B，那么问题来了，301 和 302 都是重定向，到底该用哪个，这里需要注意一下 301 和 302 的区别")]),t._v(" "),a("ul",[a("li",[t._v("301，代表 "),a("strong",[t._v("永久重定向")]),t._v("，也就是说第一次请求拿到长链接后，下次浏览器再去请求短链的话，不会向短网址服务器请求了，而是直接从浏览器的缓存里拿，这样在 server 层面就无法获取到短网址的点击数了，如果这个链接刚好是某个活动的链接，也就无法分析此活动的效果。所以我们一般不采用 301。")]),t._v(" "),a("li",[a("strong",[t._v("302")]),t._v("，代表 "),a("strong",[t._v("临时重定向")]),t._v("，也就是说每次去请求短链都会去请求短网址服务器（除非响应中用 Cache-Control 或 Expired 暗示浏览器缓存）,这样就便于 server 统计点击数，所以虽然用 302 会给 server 增加一点压力，但在数据异常重要的今天，这点代码是值得的，所以推荐使用 302！")])]),t._v(" "),a("h2",{attrs:{id:"短链生成的几种方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#短链生成的几种方法"}},[t._v("#")]),t._v(" 短链生成的几种方法")]),t._v(" "),a("h3",{attrs:{id:"_1、哈希算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、哈希算法"}},[t._v("#")]),t._v(" 1、哈希算法")]),t._v(" "),a("p",[t._v("怎样才能生成短链，仔细观察上例中的短链，显然它是由固定短链域名 + 长链映射成的一串字母组成，那么长链怎么才能映射成一串字母呢，哈希函数不就用来干这事的吗，于是我们有了以下设计思路")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic1.zhimg.com/50/v2-7ae57b44fc362a20eb29783e283a6e0b_hd.jpg?source=1940ef5c",alt:"img"}}),a("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-7ae57b44fc362a20eb29783e283a6e0b_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("p",[t._v("那么这个哈希函数该怎么取呢，相信肯定有很多人说用 MD5，SHA 等算法，其实这样做有点杀鸡用牛刀了，而且既然是加密就意味着性能上会有损失，我们其实不关心反向解密的难度，反而更关心的是哈希的运算速度和冲突概率。")]),t._v(" "),a("p",[t._v("能够满足这样的哈希算法有很多，这里推荐 Google 出品的 MurmurHash 算法，MurmurHash 是一种"),a("strong",[t._v("非加密型")]),t._v("哈希函数，适用于一般的哈希检索操作。与其它流行的哈希函数相比，对于规律性较强的 key，MurmurHash 的随机分布特征表现更良好。非加密意味着着相比 MD5，SHA 这些函数它的性能肯定更高（实际上性能是 MD5 等加密算法的十倍以上），也正是由于它的这些优点，所以虽然它出现于 2008，但目前已经广泛应用到 Redis、MemCache、Cassandra、HBase、Lucene 等众多著名的软件中。")]),t._v(" "),a("p",[a("strong",[t._v("画外音：这里有个小插曲，MurmurHash 成名后，作者拿到了 Google 的 offer，所以多做些开源的项目，说不定成名后你也能不经意间收到 Google 的 offer ^_^。")])]),t._v(" "),a("p",[t._v("MurmurHash 提供了两种长度的哈希值，32 bit，128 bit，为了让网址尽可通地短，我们选择 32 bit 的哈希值，32 bit 能表示的最大值近 43 亿，对于中小型公司的业务而言绰绰有余。对上文提到的极客长链做 MurmurHash 计算，得到的哈希值为 3002604296，于是我们现在得到的短链为 固定短链域名+哈希值 = "),a("a",{attrs:{href:"https://link.zhihu.com/?target=http%3A//gk.link/a/3002604296",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://gk.link/a/3002604296"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("strong",[t._v("如何缩短域名？")])]),t._v(" "),a("p",[t._v("有人说人这个域名还是有点长，还有一招，3002604296 得到的这个哈希值是十进制的，那我们把它转为 62 进制可缩短它的长度，10 进制转 62 进制如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic1.zhimg.com/50/v2-ce2120690471058729d058c25a905a14_hd.jpg?source=1940ef5c",alt:"img"}}),a("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-ce2120690471058729d058c25a905a14_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("p",[t._v("于是我们有 (3002604296)10 = (3hcCxy)16，一下从 10 位缩短到了 6 位！于是现在得到了我们的短链为 "),a("a",{attrs:{href:"https://link.zhihu.com/?target=http%3A//gk.link/a/3hcCxy",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://gk.link/a/3hcCxy"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("strong",[t._v("画外音：6 位 62 进制数可表示 568 亿的数，应付长链转换绰绰有余")])]),t._v(" "),a("p",[a("strong",[t._v("如何解决哈希冲突的问题？")])]),t._v(" "),a("p",[t._v("既然是哈希函数，不可避免地会产生哈希冲突（尽管概率很低），该怎么解决呢。")]),t._v(" "),a("p",[t._v("我们知道既然访问访问短链能跳转到长链，那么两者之前这种映射关系一定是要保存起来的，可以用 Redis 或 Mysql 等，这里我们选择用 Mysql 来存储。表结构应该如下所示")]),t._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE TABLE `short_url_map` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `lurl` varchar(160) DEFAULT NULL COMMENT '长地址',\n  `surl` varchar(10) DEFAULT NULL COMMENT '短地址',\n  `gmt_create` int(11) DEFAULT NULL COMMENT '创建时间',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("于是我们有了以下设计思路。")]),t._v(" "),a("ol",[a("li",[t._v("将长链（lurl）经过 MurmurHash 后得到短链。")]),t._v(" "),a("li",[t._v("再根据短链去 short_url_map 表中查找看是否存在相关记录，如果不存在，将长链与短链对应关系插入数据库中，存储。")]),t._v(" "),a("li",[t._v("如果存在，说明已经有相关记录了，此时在长串上拼接一个自定义好的字段，比如「DUPLICATE」，然后再对接接的字段串「lurl + DUPLICATE」做第一步操作，如果最后还是重复呢，再拼一个字段串啊，只要到时根据短链取出长链的时候把这些自定义好的字符串移除即是原来的长链。")])]),t._v(" "),a("p",[t._v("以上步骤显然是要优化的，插入一条记录居然要经过两次 sql 查询（根据短链查记录，将长短链对应关系插入数据库中），如果在高并发下，显然会成为瓶颈。")]),t._v(" "),a("p",[a("strong",[t._v("画外音：一般数据库和应用服务（只做计算不做存储）会部署在两台不同的 server 上，执行两条 sql 就需要两次网络通信，这两次网络通信与两次 sql 执行是整个短链系统的性能瓶颈所在！")])]),t._v(" "),a("p",[t._v("所以该怎么优化呢")]),t._v(" "),a("ol",[a("li",[t._v("首先我们需要给短链字段 surl 加上唯一索引")]),t._v(" "),a("li",[t._v("当长链经过 MurmurHash 得到短链后，直接将长短链对应关系插入 db 中，如果 db 里不含有此短链的记录，则插入，如果包含了，说明违反了唯一性索引，此时只要给长链再加上我们上文说的自定义字段「DUPLICATE」,重新 hash 再插入即可，看起来在违反唯一性索引的情况下是多执行了步骤，但我们要知道 MurmurHash 发生冲突的概率是非常低的，基本上不太可能发生，所以这种方案是可以接受的。")])]),t._v(" "),a("p",[t._v("当然如果在数据量很大的情况下，冲突的概率会增大，此时我们可以加布隆过滤器来进行优化。")]),t._v(" "),a("p",[t._v("用所有生成的短网址构建布隆过滤器，当一个新的长链生成短链后，先将此短链在布隆过滤器中进行查找，如果不存在，说明 db 里不存在此短网址，可以插入！")]),t._v(" "),a("p",[a("strong",[t._v("画外音：布隆过滤器是一种非常省内存的数据结构，长度为 10 亿的布隆过滤器，只需要 125 M 的内存空间。")])]),t._v(" "),a("p",[t._v("综上，如果用哈希函数来设计，总体的设计思路如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic1.zhimg.com/50/v2-4decedbcba9c97c0e8789070f39b55cc_hd.jpg?source=1940ef5c",alt:"img"}}),a("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-4decedbcba9c97c0e8789070f39b55cc_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("p",[t._v("用哈希算法生成的短链其实已经能满足我们的业务需求，接下来我们再来看看如何用自增序列的方式来生成短链")]),t._v(" "),a("h3",{attrs:{id:"_2、自增序列算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、自增序列算法"}},[t._v("#")]),t._v(" 2、自增序列算法")]),t._v(" "),a("p",[t._v("我们可以维护一个 ID 自增生成器，比如 1，2，3 这样的整数递增 ID，当收到一个长链转短链的请求时，ID 生成器为其分配一个 ID，再将其转化为 62 进制，拼接到短链域名后面就得到了最终的短网址，那么这样的 ID 自增生成器该如何设计呢。如果在低峰期发号还好，高并发下，ID 自增生成器的的 ID 生成可能会系统瓶颈，所以它的设计就显得尤为重要。")]),t._v(" "),a("p",[t._v("主要有以下四种获取 id 的方法")]),t._v(" "),a("p",[t._v("1、类 uuid")]),t._v(" "),a("p",[t._v("简单地说就是用 "),a("strong",[t._v("UUID uuid = UUID.randomUUID();")]),t._v(" 这种方式生成的 UUID，UUID(Universally Unique Identifier)全局唯一标识符,是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的，但这种方式生成的 id 比较长，且无序，在插入 db 时可能会频繁导致"),a("strong",[t._v("页分裂")]),t._v("，影响插入性能。")]),t._v(" "),a("p",[t._v("2、Redis")]),t._v(" "),a("p",[t._v("用 Redis 是个不错的选择，性能好，单机可支撑 10 w+ 请求，足以应付大部分的业务场景，但有人说如果一台机器扛不住呢，可以设置多台嘛，比如我布置 10 台机器，每台机器分别只生成尾号0，1，2，... 9 的 ID, 每次加 10即可，只要设置一个 ID 生成器代理随机分配给发号器生成  ID 就行了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/50/v2-a570f1f82a20faeaed4b3482ef4dca64_hd.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("p",[t._v("不过用 Redis 这种方案，需要考虑持久化（短链 ID 总不能一样吧），灾备，成本有点高。")]),t._v(" "),a("p",[t._v("3、Snowflake")]),t._v(" "),a("p",[t._v("用 Snowflake 也是个不错的选择，不过 Snowflake 依赖于系统时钟的一致性。如果某台机器的系统时钟回拨，有可能造成 ID 冲突，或者 ID 乱序。")]),t._v(" "),a("p",[t._v("4、Mysql 自增主键")]),t._v(" "),a("p",[t._v("这种方式使用简单，扩展方便，所以我们使用 Mysql 的自增主键来作为短链的 id。简单总结如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/50/v2-cea372c8f01b0ef7d33ae3e01d40b0b2_hd.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("p",[t._v("那么问题来了，如果用 Mysql 自增 id 作为短链 ID，在高并发下，db 的写压力会很大，这种情况该怎么办呢。")]),t._v(" "),a("p",[t._v("考虑一下，一定要在用到的时候去生成 id 吗，是否可以提前生成这些自增 id ?")]),t._v(" "),a("p",[t._v("方案如下：")]),t._v(" "),a("p",[t._v("设计一个专门的发号表，每插入一条记录，为短链 id 预留  （主键 id * 1000 - 999） 到  (主键 id  * 1000) 的号段，如下")]),t._v(" "),a("p",[t._v("发号表：url_sender_num")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/50/v2-e00e58ec6c468e530fd8f58876450ea6_hd.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("如图示：tmp_start_num 代表短链的起始 id，tmp_end_num 代表短链的终止 id。")])]),t._v(" "),a("p",[t._v("当长链转短链的请求打到某台机器时，先看这台机器是否分配了短链号段，未分配就往发号表插入一条记录，则这台机器将为短链分配范围在 tmp_start_num 到 tmp_end_num 之间的 id。从 tmp_start_num 开始分配，一直分配到 tmp_end_num，如果发号 id 达到了 tmp_end_num，说明这个区间段的 id 已经分配完了，则再往发号表插入一条记录就又获取了一个发号 id 区间。")]),t._v(" "),a("p",[a("strong",[t._v("画外音：思考一下这个自增短链 id 在机器上该怎么实现呢， 可以用 redis, 不过更简单的方案是用 AtomicLong，单机上性能不错，也保证了并发的安全性，当然如果并发量很大，AtomicLong 的表现就不太行了，可以考虑用 LongAdder，在高并发下表现更加优秀。")])]),t._v(" "),a("p",[t._v("整体设计图如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/50/v2-ee8505613cb2c93e7295b7a89e682186_hd.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("p",[t._v("解决了发号器问题，接下来就简单了，从发号器拿过来的 id ，即为短链 id，接下来我们再创建一个长短链的映射表即可， 短链 id 即为主键，不过这里有个需要注意的地方，我们可能需要防止多次相同的长链生成不同的短链 id 这种情况，这就需要每次先根据长链来查找 db 看是否存在相关记录，一般的做法是根据长链做索引，但这样的话索引的空间会很大，所以我们可以对长链适当的压缩，比如 MD5，再对长链的 MD5 字段做索引，这样索引就会小很多。这样只要根据长链的 md5 去表里查是否存在相同的记录即可。所以我们设计的表如下")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("short_url_map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'短链 id'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("lurl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'长链'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("md5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'长链md5'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("gmt_create"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'创建时间'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARSET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("当然了，数据量如果很大的话，后期就需要分区或分库分表了。")]),t._v(" "),a("h2",{attrs:{id:"请求短链的高并发架构设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求短链的高并发架构设计"}},[t._v("#")]),t._v(" 请求短链的高并发架构设计")]),t._v(" "),a("p",[t._v("在电商公司，经常有很多活动，秒杀，抢红包等等，在某个时间点的 QPS 会很高，考虑到这种情况，我们引入了 openResty，它是一个基于 Nginx 与 Lua 的高性能 Web 平台，由于 Nginx 的非阻塞IO模型，使用 openResty 可以轻松支持 100 w + 的并发数，一般情况下你只要部署一台即可，同时 openResty 也自带了缓存机制，集成了 redis 这些缓存模块，也可以直接连 mysql。不需要再通过业务层连这些中间件，性能自然会高不少")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pic4.zhimg.com/50/v2-ac287b28689816948f5eb9c3951a8672_hd.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),a("p",[t._v("如图示，使用 openResty 省去了业务层这一步，直达缓存层与数据库层，也提升了不少性能。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("本文对短链设计方案作了详细地剖析，旨在给大家提供几种不同的短链设计思路，文中涉及到挺多像布隆过滤器，openRestry 等技术，文中没有展开讲，建议大家回头可以去再详细了解一下。再比如文中提到的 Mysql 页分裂也需要对底层使用的 B+ tree 数据结构，操作系统按页获取等知识有比较详细地了解，相信大家各个知识点都吃透后会收获不小。")])])}),[],!1,null,null,null);s.default=r.exports}}]);